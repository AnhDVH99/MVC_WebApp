@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASP.NET_Core_MVC_Piacom.Models.ViewModels.EditOrderRequest


@{
    ViewData["Title"] = "Edit Orders";
}

<div class="container">
    <h1 class="mb-4 text-center">Edit Order</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }
</div>


<div class="container py-5">
    <form method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" class="form-control" asp-for="OrderID" />
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Order Date</label>
                <input value="@Model.OrderDate.ToString("yyyy-MM-dd HH:mm")" class="form-control" asp-for="OrderDate" id="orderDate" onchange="updateAllOrderDetails(this.value); checkCreditLimit()" />
                <span asp-validation-for="OrderDate" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <label class="form-label">Required Date</label>
                <input value="@Model.RequiredDate.ToString("yyyy-MM-dd HH:mm")"  class="form-control" id="requiredDate" asp-for="RequiredDate" />
                <span asp-validation-for="RequiredDate" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <label class="form-label">Shipped Date</label>
                <input class="form-control" id="shippedDate" asp-for="ShippedDate" />
                <span asp-validation-for="ShippedDate" class="text-danger"></span>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Order Status</label>
            <input type="text" class="form-control" asp-for="OrderStatus" required/>
            <span asp-validation-for="OrderStatus" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Comment</label>
            <input type="text" class="form-control" asp-for="Comment" />
            <span asp-validation-for="Comment" class="text-danger"></span>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Customer Name</label>
                <select class="form-select" asp-items="@Model.Customers" asp-for="CustomerID">
                </select>
                <span asp-validation-for="CustomerID" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label class="form-label">Employee ID</label>
                <select class="form-select" asp-items="@Model.Employees" asp-for="EmployeeID">
                </select>
                <span asp-validation-for="EmployeeID" class="text-danger"></span>
            </div>
        </div>

        <input type="hidden" class="form-control" asp-for="SysU" />
        <input type="hidden" class="form-control" asp-for="SysD" />




        <div class="container">
            <h1 class="styled-heading">Order Details</h1>
        </div>


        <div class="form-group">
            <table class="table">
                <thead>
                    <tr>
                        <th>Quantity</th>
                        <th>Product Name</th>
                        <th>Unit Name</th>
                        <th>Price</th>
                        <th>Price Before Tax</th>
                        <th>VAT</th>
                        <th>Environment Tax</th>
                        <th>Total</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="orderDetailRows">
                    @if (Model.OrderDetails != null && Model.OrderDetails.Any())
                        @for (int i = 0; i < Model.OrderDetails.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input type="hidden" asp-for="OrderDetails[i].OrderDetailID" class="form-control" />
                                    <input type="number" asp-for="OrderDetails[i].Quantity" class="form-control" oninput="updateTotal(@i)" required />
                                    <span asp-validation-for="OrderDetails[i].Quantity" class="text-danger"></span>
                                </td>
                                <td>
                                    <select asp-for="OrderDetails[i].ProductID" class="form-control" asp-items="Model.Products" onchange="loadProductDetails(this, @i)" required>
                                    </select>
                                </td>
                                <td>
                                    <select asp-for="OrderDetails[i].UnitID" class="form-control" asp-items="Model.Units" required>
                                    </select>
                                </td>
                                <td>
                                    <input type="number" asp-for="OrderDetails[i].Price" class="form-control" readonly required />
                                    <span asp-validation-for="OrderDetails[i].Price" class="text-danger"></span>
                                </td>
                                <td>
                                    <input type="number" asp-for="OrderDetails[i].priceBeforeTax" class="form-control" readonly required />
                                    <span asp-validation-for="OrderDetails[i].priceBeforeTax" class="text-danger"></span>
                                </td>
                                <td>
                                    <input type="number" asp-for="OrderDetails[i].VAT" class="form-control" readonly />
                                </td>
                                <td>
                                    <input type="number" asp-for="OrderDetails[i].EnvironmentTax" class="form-control" readonly />
                                </td>
                                <td>
                                    <input type="number" asp-for="OrderDetails[i].TotalAmount" class="form-control" readonly />
                                    <span asp-validation-for="OrderDetails[i].TotalAmount" class="text-danger"></span>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                                </td>
                            </tr>
                        }
                </tbody>
            </table>
            <div class="mb-3">
                <button type="button" class="btn btn-primary" onclick="addOrderDetailRow()">Add Order Detail</button>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="d-flex">
                    <button type="submit" class="btn btn-dark">Update</button>
                    <button type="submit" class="btn btn-danger ms-2" asp-action="Delete">Delete</button>
                </div>
            </div>
        </div>
    </form>
</div>





@section Scripts {
    <script type="application/json" id="productData">
        @Html.Raw(Json.Serialize(Model.Products))
    </script>
    <script type="application/json" id="unitData">
        @Html.Raw(Json.Serialize(Model.Units))
    </script>
    <script>
        // Function to add a new row for Price Details
        function addOrderDetailRow() {
            var rowCount = document.getElementById('orderDetailRows').rows.length;

            var productData = JSON.parse(document.getElementById('productData').textContent);

            var unitData = JSON.parse(document.getElementById('unitData').textContent);

            var productOptions = productData.map(p => `<option value="${p.value}">${p.text}</option>`).join('');

            var unitOptions = unitData.map((u) => `<option value=\"${u.value}\">${u.text}</option>`).join('');

            var newRow = document.createElement('tr');
            newRow.innerHTML = `
                                        <td>
                                            <input type="number" name="OrderDetails[${rowCount}].Quantity" class="form-control" oninput="updateTotal(${rowCount})"/>
                                        </td>
                                        <td>
                                            <select name="OrderDetails[${rowCount}].ProductID" class="form-control" onchange="loadProductDetails(this, ${rowCount})">
                                                ${productOptions}
                                            </select>

                                        </td>
                                        <td>
                                            <select name="OrderDetails[${rowCount}].UnitID" class="form-control">
                                                ${unitOptions}
                                            </select>
                                        </td>
                                        <td>
                                             <input type="number" name="OrderDetails[${rowCount}].Price" class="form-control" readonly />
                                        </td>
                                         <td>
                                             <input type="number" name="OrderDetails[${rowCount}].priceBeforeTax" class="form-control" readonly/>
                                        </td>
                                        <td>
                                             <input type="number" name="OrderDetails[${rowCount}].VAT" class="form-control" readonly />
                                        </td>
                                        <td>
                                             <input type="number" name="OrderDetails[${rowCount}].EnvironmentTax" class="form-control" readonly />
                                        </td>
                                        <td>
                                             <input type="number" name="OrderDetails[${rowCount}].TotalAmount" class="form-control" readonly />
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                                        </td>
                                    `;

            document.getElementById('orderDetailRows').appendChild(newRow);
            var productSelect = newRow.querySelector(`select[name="OrderDetails[${rowCount}].ProductID"]`);
            loadProductDetails(productSelect, rowCount);
            updateIndices();
        }





        function updateIndices() {
            const orderDetailRows = document.querySelectorAll('#orderDetailRows > tr');
            orderDetailRows.forEach((row, index) => {
                const productSelect = row.querySelector('select[name^="OrderDetails["]');
                if (productSelect) {
                    productSelect.name = `OrderDetails[${index}].ProductID`;
                }
            });
        }




        // Function to remove a row
        function removeRow(button) {
            var row = button.closest("tr");
            row.remove(); // Remove the row from the DOM

            // Update the names of all remaining rows
            var rows = document.querySelectorAll("#orderDetailRows tr");
            rows.forEach((row, index) => {
                row.querySelectorAll("select").forEach(input => {
                    var name = input.getAttribute("name");
                    if (name) {
                        // Update the name attribute to the new index
                        var newName = name.replace(/\[\d+\]/, "[" + index + "]");
                        input.setAttribute("name", newName);
                    }

                });

                row.querySelectorAll("input").forEach(input => {
                    var name = input.getAttribute("name");
                    if (name) {
                        // Update the name attribute to the new index
                        var newName = name.replace(/\[\d+\]/, "[" + index + "]");
                        input.setAttribute("name", newName);
                    }

                    var id = input.getAttribute("id");
                    if (id) {
                        // Update the id attribute to the new index
                        var newId = id.replace(/_\d+_/, "_" + index + "_");
                        input.setAttribute("id", newId);
                    }
                });
            });
        }


        function calculatePriceBeforeTax(price, vatPercentage, environmentTax) {
            return price / (1 + vatPercentage / 100) - environmentTax;
        }



        function calculateTotal(quantity, price) {
            return quantity * price;
        }



        function updateTotal(rowIndex) {
            // Get the required input fields
            var quantityInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].Quantity"]`);
            var price = document.querySelector(`input[name="OrderDetails[${rowIndex}].Price"]`);
            var totalAmountInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].TotalAmount"]`);

            var quantity = parseFloat(quantityInput.value) || 0;
            var price = parseFloat(price.value) || 0;

            // Calculate total and update the totalAmount input field
            var total = calculateTotal(quantity, price);
            totalAmountInput.value = total.toFixed(2);
        }


        function updatePriceBeforeTax(priceInput, rowIndex) {
            // Parse values, defaulting to 0 if empty or invalid
            var vatInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].VAT"]`);
            var priceInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].Price"]`)
            var environmentTaxInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].EnvironmentTax"]`);
            var priceBeforeTaxInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].priceBeforeTax"]`);
            var totalAmountInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].TotalAmount"]`);
            var quantityInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].Quantity"]`);


            var price = parseFloat(priceInput.value) || 0;
            var vatPercentage = parseFloat(vatInput.value) || 0;
            var environmentTax = parseFloat(environmentTaxInput.value) || 0;


            if (price > 0) {
                var priceBeforeTax = calculatePriceBeforeTax(price, vatPercentage, environmentTax);
                priceBeforeTaxInput.value = priceBeforeTax.toFixed(2);
            } else {
                priceBeforeTaxInput.value = '';
            }
        }


        function updateAllOrderDetails(orderDate) {
            var orderDetailRows = document.querySelectorAll('#orderDetailRows tr');

            orderDetailRows.forEach(function (row, rowIndex) {
                var productSelect = row.querySelector('select[name^="OrderDetails["][name$="].ProductID"]');
                if (productSelect) {
                    loadProductDetails(productSelect, rowIndex, orderDate);
                }
            });
        }

        function loadProductDetails(selectElement, rowIndex, orderDate) {
            var productId = selectElement.value;
            var orderId = '@Model.OrderID';
            var orderDate = document.querySelector('input[name="OrderDate"]').value;


            console.log("Loading product details for Product ID:", productId);


            var vatInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].VAT"]`);
            var priceInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].Price"]`);
            var environmentTaxInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].EnvironmentTax"]`);
            var priceBeforeTaxInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].priceBeforeTax"]`);
            var quantityInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].Quantity"]`);
            var totalAmountInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].TotalAmount"]`);

            var previousProductID = selectElement.dataset.previousProductID || "";
            var previousVat = vatInput ? vatInput.value : null;
            var previousEnvironmentTax = environmentTaxInput ? environmentTaxInput.value : null;


            if (productId) {
                $.ajax({
                    url: '/Orders/GetProductPriceDetail',
                    type: 'GET',
                    data: { productId: productId, orderDate: orderDate },
                    cache: false,
                    success: function (data) {

                        if (vatInput) {
                            vatInput.value = data.vat;
                        }

                        if (environmentTaxInput) {
                            environmentTaxInput.value = data.environmentTax;
                        }

                        if (priceInput) {
                            priceInput.value = data.price;
                        }

                        if (priceInput && vatInput && environmentTaxInput) {
                            var priceBeforeTax = calculatePriceBeforeTax(
                                parseFloat(priceInput.value),
                                parseFloat(vatInput.value),
                                parseFloat(environmentTaxInput.value)
                            );
                            priceBeforeTaxInput.value = priceBeforeTax.toFixed(2);
                        }

                        if (quantityInput && priceInput) {
                            var Total = calculateTotal(
                                parseFloat(quantityInput.value),
                                parseFloat(priceInput.value)
                            );
                            totalAmountInput.value = Total.toFixed(2);
                        }

                    },
                    error: function () {
                        alert("Error retrieving tax data.");

                        if (vatInput) {
                            vatInput.value = "";
                        }

                        if (environmentTaxInput) {
                            environmentTaxInput.value = "";
                        }
                    }
                });
            }
        }

    </script>
}



  


<style>
    .short-input {
        max-width: 250px;
    }

    .styled-heading {
        font-size: 2.5rem;
        font-weight: bold;
        color: black;
        background: linear-gradient(to right, #6a11cb, black);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        padding: 10px 0;
        text-align: center;
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>


@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}